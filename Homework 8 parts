/*
A) The factoryMethod() method in the Creator class is the Factory Method pattern implementation. 
*/

interface Product {
    void print();
}

class ConcreteProduct implements Product {
    @Override
    public void print() {
        System.out.println("ConcreteProduct");
    }
}

abstract class Creator {
    public abstract Product factoryMethod();
}

class ConcreteCreator extends Creator {
    @Override
    public Product factoryMethod() {
        return new ConcreteProduct();
    }
}

-------------

/*
B) Decorator pattern.
*/

abstract class Decorator implements Product {
    private Product product;

    public Decorator(Product product) {
        this.product = product;
    }

    public void print() {
        product.print();
    }
}

class ConcreteDecorator1 extends Decorator {
    public ConcreteDecorator1(Product product) {
        super(product);
    }

    public void print() {
        super.print();
        System.out.println("ConcreteDecorator1");
    }
}

class ConcreteDecorator2 extends Decorator {
    public ConcreteDecorator2(Product product) {
        super(product);
    }

    public void print() {
        super.print();
        System.out.println("ConcreteDecorator2");
    }
}

-------------

/**
C) Function
 */
public class TheFunction {
    public static void createAndPrintProduct() {
    Creator creator = new ConcreteCreator();
    Product product = creator.factoryMethod();
    Product decorator1 = new ConcreteDecorator1(product);
    Product decorator2 = new ConcreteDecorator2(decorator1);
    decorator2.print();
    }
    
}

-------------

/**
 D) Main
 */
public class C6221HW8 {

    public static void main(String[] args) {
    System.out.println("The Factory Method and Decorator patterns:");
    TheFunction.createAndPrintProduct();
    }   
}


